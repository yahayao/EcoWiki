name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BACKEND_DIR: ./www/backend
  FRONTEND_DIR: ./www/frontend

jobs:
  backend-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test123
          MYSQL_DATABASE: ecowiki_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h"127.0.0.1" -P3306 -uroot -ptest123 --silent; do
          echo 'waiting for mysql...'
          sleep 1
        done

    - name: Run backend tests
      working-directory: ${{ env.BACKEND_DIR }}
      run: |
        mvn clean test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/ecowiki_test
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: test123

    - name: Build backend
      working-directory: ${{ env.BACKEND_DIR }}
      run: mvn clean package -DskipTests

    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: ${{ env.BACKEND_DIR }}/target/*.jar

  frontend-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8

    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      working-directory: ${{ env.FRONTEND_DIR }}
      run: pnpm install

    - name: Type check
      working-directory: ${{ env.FRONTEND_DIR }}
      run: pnpm run type-check

    - name: Build frontend
      working-directory: ${{ env.FRONTEND_DIR }}
      run: pnpm run build

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: ${{ env.FRONTEND_DIR }}/dist

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.ecowiki.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: ./artifacts/backend

    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./artifacts/frontend

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里添加实际的部署脚本
        # 例如：复制文件到服务器、重启服务等

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://ecowiki.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: ./artifacts/backend

    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./artifacts/frontend

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 这里添加实际的部署脚本
        # 例如：
        # - 使用 SSH 连接到服务器
        # - 停止现有服务
        # - 备份当前版本
        # - 部署新版本
        # - 启动服务
        # - 运行健康检查

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          backend-jar
          frontend-dist
